NEXT_PUBLIC_API_URL=

import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { api } from "../apiSlices";

interface IUserResponse {
  // ...existing interface...
}

interface UserState {
  currentUser: IUserResponse | null;
  isAuthenticated: boolean;
}

const initialState: UserState = {
  currentUser: null,
  isAuthenticated: false,
};

const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    setUser: (state, action: PayloadAction<IUserResponse>) => {
      state.currentUser = action.payload;
      state.isAuthenticated = true;
    },
    logout: (state) => {
      state.currentUser = null;
      state.isAuthenticated = false;
    },
  },
});

const userApiConfig = api.enhanceEndpoints({ addTagTypes: ["Users"] });
const userApi = userApiConfig.injectEndpoints({
  endpoints: (builder) => ({
    login: builder.mutation<IUserResponse, { email: string; password: string }>({
      query: (credentials) => ({
        url: '/auth/login',
        method: 'POST',
        body: credentials,
      }),
      // Automatically update the Redux state when login is successful
      onQueryStarted: async (_, { dispatch, queryFulfilled }) => {
        try {
          const { data } = await queryFulfilled;
          dispatch(setUser(data));
        } catch (error) {
          // Handle error if needed
        }
      },
    }),
    // ...existing endpoints...
  }),
});

export const { setUser, logout } = userSlice.actions;
export const { useLoginMutation, useGetCurrentUserQuery, useGetUserByIDQuery } = userApi;
export default userSlice.reducer;